# Import and clean “raw” data -----------------------------------------------------
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Split Kigali
df2 = cSplit(df, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Cleanup time.
df2 = df2 %>%
select(-`To include by Geo Center?`, -V12) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
gather(regCol, district, -project, -mechanism, -IP, -manager, -nationwide) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A' | nationwide == 'Yes' | nationwide == 'Y' | nationwide == 'yes' | nationwide == 'y') # remove NAs (saving the nation-wide pgrms)
install.packages("rgdal", type = "source")
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Split Kigali
df2 = cSplit(df, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Cleanup time.
df2 = df2 %>%
select(-`To include by Geo Center?`, -V12) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
gather(regCol, district, -project, -mechanism, -IP, -manager, -nationwide) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A' | nationwide == 'Yes' | nationwide == 'Y' | nationwide == 'yes' | nationwide == 'y') # remove NAs (saving the nation-wide pgrms)
df2 = left_join(df2, rwAdm, by = c("district" = "District"))
summary(df2$Province)
View(df2  %>% filter(is.na(Province) | Province %like% 'Ibu'))
rwAdm %>% group_by(Province) %>% summarise(n())
View(rwAdm)
rwAdm %>% group_by(Province) %>% summarise(count(District))
rwAdm %>% group_by(Province) %>% count_distinct(District)
rwAdm %>% group_by(Province) %>% summarise(count_distinct(District))
summarise(rwAdm,
planes = count_distinct(District)))
summarise(rwAdm,
planes = count_distinct(District))
?count_distinct
rwAdm %>% group_by(Province) %>% summarise(length(unique(District)))
rwAdm %>% group_by(Province, District) %>% summarise(length(unique(District)))
rwAdm %>% filter(Province %like% 'West') %>% group_by(Province, District) %>% summarise(length(unique(District)))
northernDistricts = rwAdm %>%
filter(District %like% 'North') %>%
select(Sector)
northernDistricts
rwAdm %>%
filter(District %like% 'North')
northernDistricts = rwAdm %>%
filter(Province %like% 'North') %>%
select(District)
northernDistricts
adm1Name = 'North'
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
northernDistricts = unique(districts)# Eliminate duplicates
districts = unique(districts)# Eliminate duplicates
districts = paste0(districts, collapse = ', ') # Convert to a string
districts
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts)) # Eliminate duplicates; converts from a factor to a character
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(districts$District)
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(districts$District)
districts
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District))
districts = paste0(districts, collapse = ', ') # Convert to a string
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
allDistricts = paste0(northDistricts, southDistricts, eastDistricts, westDistricts, collapse = ', ')
allDistricts
df2 = df %>%
select(-`To include by Geo Center?`, -V12) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'),
allDistricts, NA))
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`, -V12) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'),
allDistricts, NA))
colnames(df)
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'),
allDistricts, NA))
kigaliDistricts = findAdm2('Kigali')
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'),
allDistricts, NA),
`Kigali Province2` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`))
View(df %>% select(contains('Kig')))
View(df2 %>% select(contains('Kig')))
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province` = ifelse(`Southern Province` %like% 'All',
southDistricts, `Southern Province`),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province`),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager, -nationwide) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A' | nationwide == 'Yes' | nationwide == 'Y' | nationwide == 'yes' | nationwide == 'y') # remove NAs (saving the nation-wide pgrms)
df2 = left_join(df2, rwAdm, by = c("district" = "District"))
summary(df2$Province)
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager, -nationwide) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A' | nationwide == 'Yes' | nationwide == 'Y' | nationwide == 'yes' | nationwide == 'y') # remove NAs (saving the nation-wide pgrms)
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager)
summary(df2$district)
unqie(df2$district)
unique(df2$district)
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
allDistricts
northDistricts
allDistricts = paste0(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
allDistricts
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
allDistricts
# Code to clean up Rwanda CHAIN IP data -----------------------------------
# Laura Hughes, April 2016, lhughes@usaid.gov
# Installing packages note ------------------------------------------------
# In Mac OS X, need to install GDAL first.
# In terminal, install macports: https://www.macports.org/install.php
# Then 'sudo port install gdal'
# Go back to R and install rgdal
# install.packages("rgdal",  type="source")
library(llamar)
library(splitstackshape)
library(rgdal)
library(maptools)
loadPkgs()
# Import and clean “raw” data -----------------------------------------------------
# geo data ----------------------------------------------------------------
# Raw shapefile in R
rwShp <- readShapePoly('~/Documents/USAID/Rwanda/data in/Rwanda_Admin3/Rwanda_Admin_Three.shp')
rwAdm = rwShp@data
# Pull out all the Adm2 names for each Adm1
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
kigaliDistricts = findAdm2('Kigali')
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
df2 = left_join(df2, rwAdm, by = c("district" = "District"))
df2 %>% group_by(Province) %>% summarise(n())
df2 = full_join(df2, rwAdm, by = c("district" = "District"))
View(rwAdm %>% filter(Province %in% c('Western Province', 'Iburengerazuba')))
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', Province)) # Iburengerazuba == West
View(rwAdm)
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', as.character(Province))) # Iburengerazuba == West
View(rwAdm)
df2 %>% group_by(Province) %>% summarise(n())
rwAdm %>% group_by(Province) %>% summarise(n())
# Code to clean up Rwanda CHAIN IP data -----------------------------------
# Laura Hughes, April 2016, lhughes@usaid.gov
# Installing packages note ------------------------------------------------
# In Mac OS X, need to install GDAL first.
# In terminal, install macports: https://www.macports.org/install.php
# Then 'sudo port install gdal'
# Go back to R and install rgdal
# install.packages("rgdal",  type="source")
library(llamar)
library(splitstackshape)
library(rgdal)
library(maptools)
loadPkgs()
# Import and clean “raw” data -----------------------------------------------------
# geo data ----------------------------------------------------------------
# Raw shapefile in R
rwShp <- readShapePoly('~/Documents/USAID/Rwanda/data in/Rwanda_Admin3/Rwanda_Admin_Three.shp')
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', as.character(Province))) # Iburengerazuba == West
# Pull out all the Adm2 names for each Adm1
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
kigaliDistricts = findAdm2('Kigali')
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
# Results -----------------------------------------------------------------
results = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/RF Map to Partners.xlsx')
# Split the column based on the comma
results = cSplit(results, 'Partners', ',') %>%
gather(partnerNum, partner, -Level, -Result, -INWA) %>% # Convert from wide to long dataset
select(-partnerNum) %>%  # Remove artifact of split/gather
filter(!is.na(partner)) %>% # Remove blank lines
mutate(INWA = ifelse(INWA %like% 'No INWA', 0, 1)) # Convert to binary
# Check INWA tag is correct.
# Merge df w/ Adm names ---------------------------------------------------
df2 = full_join(df2, rwAdm, by = c("district" = "District"))
View(df2 %>% filter(is.na(project)))
require("rgdal") # requires sp, will use proj.4 if installed
require("maptools")
require("ggplot2")
require("plyr")
getwd()
utah = readOGR(dsn=".", layer="Rwanda_Admin_Three")
setwd("~/Documents/USAID/Rwanda/data in/Rwanda_Admin3")
utah = readOGR(dsn=".", layer="Rwanda_Admin_Three")
utah@data$id = rownames(utah@data)
utah.points = fortify(utah, region="id")
install.packages('rgeos')
library(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos="http://R-Forge.R-project.org")
