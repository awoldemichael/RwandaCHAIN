mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
allDistricts
northDistricts
allDistricts = paste0(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
allDistricts
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
allDistricts
# Code to clean up Rwanda CHAIN IP data -----------------------------------
# Laura Hughes, April 2016, lhughes@usaid.gov
# Installing packages note ------------------------------------------------
# In Mac OS X, need to install GDAL first.
# In terminal, install macports: https://www.macports.org/install.php
# Then 'sudo port install gdal'
# Go back to R and install rgdal
# install.packages("rgdal",  type="source")
library(llamar)
library(splitstackshape)
library(rgdal)
library(maptools)
loadPkgs()
# Import and clean “raw” data -----------------------------------------------------
# geo data ----------------------------------------------------------------
# Raw shapefile in R
rwShp <- readShapePoly('~/Documents/USAID/Rwanda/data in/Rwanda_Admin3/Rwanda_Admin_Three.shp')
rwAdm = rwShp@data
# Pull out all the Adm2 names for each Adm1
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
kigaliDistricts = findAdm2('Kigali')
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
df2 = left_join(df2, rwAdm, by = c("district" = "District"))
df2 %>% group_by(Province) %>% summarise(n())
df2 = full_join(df2, rwAdm, by = c("district" = "District"))
View(rwAdm %>% filter(Province %in% c('Western Province', 'Iburengerazuba')))
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', Province)) # Iburengerazuba == West
View(rwAdm)
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', as.character(Province))) # Iburengerazuba == West
View(rwAdm)
df2 %>% group_by(Province) %>% summarise(n())
rwAdm %>% group_by(Province) %>% summarise(n())
# Code to clean up Rwanda CHAIN IP data -----------------------------------
# Laura Hughes, April 2016, lhughes@usaid.gov
# Installing packages note ------------------------------------------------
# In Mac OS X, need to install GDAL first.
# In terminal, install macports: https://www.macports.org/install.php
# Then 'sudo port install gdal'
# Go back to R and install rgdal
# install.packages("rgdal",  type="source")
library(llamar)
library(splitstackshape)
library(rgdal)
library(maptools)
loadPkgs()
# Import and clean “raw” data -----------------------------------------------------
# geo data ----------------------------------------------------------------
# Raw shapefile in R
rwShp <- readShapePoly('~/Documents/USAID/Rwanda/data in/Rwanda_Admin3/Rwanda_Admin_Three.shp')
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', as.character(Province))) # Iburengerazuba == West
# Pull out all the Adm2 names for each Adm1
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
kigaliDistricts = findAdm2('Kigali')
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, district, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(district), district != 'N/A') # remove NAs
# Results -----------------------------------------------------------------
results = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/RF Map to Partners.xlsx')
# Split the column based on the comma
results = cSplit(results, 'Partners', ',') %>%
gather(partnerNum, partner, -Level, -Result, -INWA) %>% # Convert from wide to long dataset
select(-partnerNum) %>%  # Remove artifact of split/gather
filter(!is.na(partner)) %>% # Remove blank lines
mutate(INWA = ifelse(INWA %like% 'No INWA', 0, 1)) # Convert to binary
# Check INWA tag is correct.
# Merge df w/ Adm names ---------------------------------------------------
df2 = full_join(df2, rwAdm, by = c("district" = "District"))
View(df2 %>% filter(is.na(project)))
require("rgdal") # requires sp, will use proj.4 if installed
require("maptools")
require("ggplot2")
require("plyr")
getwd()
utah = readOGR(dsn=".", layer="Rwanda_Admin_Three")
setwd("~/Documents/USAID/Rwanda/data in/Rwanda_Admin3")
utah = readOGR(dsn=".", layer="Rwanda_Admin_Three")
utah@data$id = rownames(utah@data)
utah.points = fortify(utah, region="id")
install.packages('rgeos')
library(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos="http://R-Forge.R-project.org")
# Code to clean up Rwanda CHAIN IP data -----------------------------------
# Laura Hughes, April 2016, lhughes@usaid.gov
# Installing packages note ------------------------------------------------
# In Mac OS X, need to install GDAL first.
# In terminal, install macports: https://www.macports.org/install.php
# Then 'sudo port install gdal'
# Go back to R and install rgdal
# install.packages("rgdal",  type="source")
# AND then rgeos.
# http://tlocoh.r-forge.r-project.org/mac_rgeos_rgdal.html
# Reinstall R, since El Capitan has problems w/ saving to usr/lib
# Install geos: http://www.kyngchaos.com/
# At cmd line:
# R CMD INSTALL /Users/laurahughes/Downloads/rgeos_0.3-19.tar.gz --configure-args='--with-geos-config=/Library/Frameworks/GEOS.framework/unix/bin/geos-config'
library(llamar)
library(splitstackshape)
library(rgdal)
library(maptools)
library(rgeos)
loadPkgs()
# Import and clean “raw” data -----------------------------------------------------
# geo data ----------------------------------------------------------------
# Raw shapefile in R
rwShp <- readShapePoly('~/Documents/USAID/Rwanda/data in/Rwanda_Admin3/Rwanda_Admin_Three.shp')
rwAdm = rwShp@data %>%
mutate(Province = ifelse(Province == 'Iburengerazuba',
'Western Province', as.character(Province))) # Iburengerazuba == West
rwAdm2 = rwAdm %>%
select(-Sector, -Sect_ID, -OBJECTID) %>%
distinct()
# Pull out all the Adm2 names for each Adm1
findAdm2 = function(adm1Name){
districts = rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
districts = unique(as.character(districts$District)) # Eliminate duplicates; converts from a factor to a character
districts = paste0(districts, collapse = ', ') # Convert to a string
}
northDistricts = findAdm2('North')
southDistricts = findAdm2('South')
eastDistricts = findAdm2('East')
westDistricts = findAdm2('West')
kigaliDistricts = findAdm2('Kigali')
allDistricts = paste(northDistricts, southDistricts, eastDistricts, westDistricts, sep = ', ')
# Project locations -------------------------------------------------------
df = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/Locations of CHAIN IMs in Rwanda (2016-03-22).xlsm')
# Cleanup #1: rename columns
# Fix any values that are "all" region/country
df2 = df %>%
select(-`To include by Geo Center?`) %>% # Drop unneeded columns
rename(project = Project,
mechanism = `Implementing Mechanism`,
IP = `Implementing Partner`,
manager = `AOR/COR or Activity Manager`,
nationwide = `Nationwide?\r\n(If yes, skip the remaining columns)`) %>% # rename so easier to deal with
mutate(nationwide = ifelse(nationwide %in% c('Yes', 'yes', 'Y', 'y'), # If all of the province or country are selected, convert to a list of the Adm2 names.
allDistricts, NA),
`Kigali Province` = ifelse(`Kigali Province` %like% 'All',
kigaliDistricts, `Kigali Province`),
`Northern Province` = ifelse(`Northern Province` %like% 'All',
northDistricts, `Northern Province`),
`Southern Province ` = ifelse(`Southern Province ` %like% 'All',
southDistricts, `Southern Province `),
`Eastern Province` = ifelse(`Eastern Province` %like% 'All',
eastDistricts, `Eastern Province`),
`Western Province` = ifelse(`Western Province` %like% 'All',
westDistricts, `Western Province`))
# Split Nationwide
df2 = cSplit(df2, 'nationwide', ',')
# Split Kigali
df2 = cSplit(df2, 'Kigali Province', ',')
# Split Northern
df2 = cSplit(df2, 'Northern Province', ',')
# Split Western
df2 = cSplit(df2, 'Western Province', ',')
# Split Southern
df2 = cSplit(df2, 'Southern Province ', ',')
# Split Eastern
df2 = cSplit(df2, 'Eastern Province', ',')
# Convert to a tidy data frame
df2 = df2 %>%
gather(regCol, District, -project, -mechanism, -IP, -manager) %>% # convert from wide to long df
select(-regCol) %>% # Remove column generated by gathering
filter(!is.na(District), District != 'N/A') # remove NAs
# Results -----------------------------------------------------------------
results = read_excel('~/Documents/USAID/Rwanda/CHAIN/datain/RF Map to Partners.xlsx')
# Split the column based on the comma
results = cSplit(results, 'Partners', ',') %>%
gather(partnerNum, partner, -Level, -Result, -INWA) %>% # Convert from wide to long dataset
select(-partnerNum) %>%  # Remove artifact of split/gather
filter(!is.na(partner)) %>% # Remove blank lines
mutate(INWA = ifelse(INWA %like% 'No INWA', 0, 1)) # Convert to binary
# Check INWA tag is correct.
# Merge df w/ Adm names ---------------------------------------------------
df3 = full_join(df2, rwAdm2, by = c("District" = "District"))
ggplot(df2, aes(x = District)) +
geom_bar(stat = 'count') +
facet_wrap(~IP)
setwd('~/Documents/USAID/Rwanda/data in/Rwanda_Admin2/')
rw = readOGR(dsn=".", layer="District_Boundary_2006")
rw@data$id = rownames(rw@data)
rw.points = fortify(rw, region="id")
rw.df = plyr::join(rw.points, rw@data, by="id")
rw.df2 = full_join(rw.df, df3, by = c("Prov_ID", "Dist_ID", "District"))
y = rw.df2 %>%
filter(project %like% 'CHAIN')
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey30K) +
geom_polygon(aes(fill = id), data = y) +
geom_path(color="white", size = 0.1) +
facet_wrap(~ mechanism) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/chain.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
View(df2)
View(df3)
y = rw.df2 %>%
filter(project %like% 'FTF')
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey30K) +
geom_polygon(aes(fill = id), data = y) +
geom_path(color="white", size = 0.1) +
facet_wrap(~ mechanism) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/ftf.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
y = rw.df2 %>%
filter(project %like% 'Purple')
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey30K) +
geom_polygon(aes(fill = id), data = y) +
geom_path(color="white", size = 0.1) +
facet_wrap(~ mechanism) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/puple.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
y = rw.df2 %>%
filter(mechanism %like% 'Gim')
z = rw.df2 %>%
filter(mechanism %like% 'RSMP')
colour1 = 'wheat'
colour2 = 'dodgerblue'
y = rw.df2 %>%
filter(mechanism %like% 'Gim')
z = rw.df2 %>%
filter(mechanism %like% 'RSMP')
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey15K) +
geom_polygon(fill = colour1, alpha = 0.6, data = y) +
geom_polygon(fill = colour2, alpha = 0.6, data = y) +
geom_path(color="white", size = 0.1) +
facet_wrap(~ mechanism) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/chain_overlap.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey15K) +
geom_polygon(fill = colour1, alpha = 0.6, data = y) +
geom_polygon(fill = colour2, alpha = 0.6, data = z) +
geom_path(color="white", size = 0.1) +
facet_wrap(~ mechanism) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/chain_overlap.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey30K) +
geom_polygon(aes(fill = id), data = y) +
geom_path(color="white", size = 0.1) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/ftf.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
colour1 = 'yellow'
colour1 = 'yellow'
x = ggplot(rw.df) +
aes(x = long, y = lat, group = id)+
geom_polygon(fill = grey15K) +
geom_polygon(fill = colour1, alpha = 0.6, data = y) +
geom_polygon(fill = colour2, alpha = 0.6, data = z) +
geom_path(color="white", size = 0.1) +
coord_equal() +
theme_blank()
ggsave('~/Documents/USAID/Rwanda/CHAIN/plots/chain_overlap.pdf',
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
View(df3)
df3$District
levels(df3$District)
dists = c(sort(kigaliDistricts), sort(northDistricts), sort(eastDistricts),sort(southDistricts), sort(westDistricts))
dists
dists = c(arrange(kigaliDistricts), sort(northDistricts), sort(eastDistricts),sort(southDistricts), sort(westDistricts))
sort(kigaliDistricts)
rwAdm %>%
filter(Province %like% adm1Name) %>%
select(District)
rwAdm %>%
filter(Province %like% 'Kigali') %>%
select(District) %>% arrange(D)
rwAdm %>%
filter(Province %like% 'Kigali') %>%
select(District) %>% arrange(District)
unique(rwAdm %>%
filter(Province %like% 'Kigali') %>%
select(District) %>% arrange(District))
unique(rwAdm %>%
filter(Province %like% 'N') %>%
select(District) %>% arrange(District))
unique(rwAdm %>%
filter(Province %like% 'E') %>%
select(District) %>% arrange(District))
unique(rwAdm %>%
filter(Province %like% 'S') %>%
select(District) %>% arrange(District))
unique(rwAdm %>%
filter(Province %like% 'W') %>%
select(District) %>% arrange(District))
df3$District = factor(df3$District, levels = c('Gasabo', 'Kicukiro','Nyarugenge', 'Burera','Gakenke','Gicumbi','Musanze','Rulindo','Bugesera', 'Gatsibo', 'Kayonza',  'Kirehe',   'Ngoma','Nyagatare','Rwamagana','Gisagara',    'Huye', 'Kamonyi', 'Muhanga','Nyamagabe',  'Nyanza','Nyaruguru', 'Ruhango',  'Karongi','Ngororero',  'Nyabihu','Nyamasheke',   'Rubavu',   'Rusizi',  'Rutsiro'))
x = df3 %>% filter(mechanism %like% 'CHAIN')
x
x = df3 %>% filter(project %like% 'CHAIN')
x
ggplot(x, aes(x = District, y = mechanism)) +
geom_point(size = 5)
orderMech = x %>%
group_by(mechanism) %>%
summarise(num = n()) %>%
arrange(desc(num))
x$mechanism = factor(x$mechanism, levels =
orderMech$num)
ggplot(x, aes(x = District, y = mechanism)) +
geom_point(size = 5, colour = 'dodgerblue')
orderMech
orderMech
x = df3 %>% filter(project %like% 'CHAIN')
orderMech = x %>%
group_by(mechanism) %>%
summarise(num = n()) %>%
arrange(desc(num))
x$mechanism = factor(x$mechanism, levels =
orderMech$mechanism)
ggplot(x, aes(x = District, y = mechanism)) +
geom_point(size = 5, colour = 'dodgerblue')
